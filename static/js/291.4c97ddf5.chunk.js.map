{"version":3,"file":"static/js/291.4c97ddf5.chunk.js","mappings":"oRAIaA,EAAa,SAAHC,GAAoB,IAAdC,EAAMD,EAANC,OACrBC,GAAWC,EAAAA,EAAAA,MAIjB,OACEC,EAAAA,EAAAA,KAAA,MAAAC,SACGJ,EAAOK,KAAI,SAAAC,GAAK,OACfH,EAAAA,EAAAA,KAAA,MAAAC,UACEG,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAaJ,EAAMK,IAAMC,MAAO,CAAEC,KAAMZ,GAAWG,SAAA,EACzDD,EAAAA,EAAAA,KAAA,OACEW,IACER,EAAMS,YAAW,kCAAAL,OACqBJ,EAAMS,aATxD,6DAYUC,IAAKV,EAAMW,SAEbd,EAAAA,EAAAA,KAAA,KAAAC,SAAIE,EAAMW,YAVLX,EAAMK,GAYV,KAIb,E,SC1BaO,E,OAAkBC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sGCC5BC,EAAS,SAAHvB,GAAsB,IAAhBK,EAAQL,EAARK,SACvB,OAAOD,EAAAA,EAAAA,KAACe,EAAe,CAAAd,SAAEA,GAC3B,E,SCEMmB,GAAWC,EAAAA,EAAAA,IAAGJ,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sEA0CpB,EApCa,WACX,IAAAI,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCzB,EAAM2B,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAkCJ,EAAAA,EAAAA,WAAS,GAAMK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAiB9B,OAfAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAApC,GAAAqC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEK,OAFLF,EAAAC,KAAA,EAEdV,GAAa,GAAMS,EAAAE,KAAA,GACAC,EAAAA,EAAAA,MAAc,KAAD,EAA1BL,EAAIE,EAAAI,KACVjB,GAASkB,EAAAA,EAAAA,GAAKP,EAAKQ,UAAUN,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAE7BQ,QAAQC,IAAI,QAAST,EAAAO,GAAMG,SAAS,QAEhB,OAFgBV,EAAAC,KAAA,GAEpCV,GAAa,GAAOS,EAAAW,OAAA,6BAAAX,EAAAY,OAAA,GAAAf,EAAA,wBAEvB,kBAVc,OAAAxC,EAAAwD,MAAA,KAAAC,UAAA,KAWfrB,GACF,GAAG,KAGD5B,EAAAA,EAAAA,MAAAkD,EAAAA,SAAA,CAAArD,SAAA,CACG4B,IACC7B,EAAAA,EAAAA,KAACmB,EAAM,CAAAlB,UACLD,EAAAA,EAAAA,KAACuD,EAAAA,EAAe,CACdC,MAAO,UACPnC,IAAKD,EACLqC,QAAS5B,OAIf7B,EAAAA,EAAAA,KAAA,MAAAC,SAAI,yBACJD,EAAAA,EAAAA,KAACL,EAAU,CAACE,OAAQA,MAG1B,C","sources":["components/MoviesList/MoviesList.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","pages/Home/Home.jsx"],"sourcesContent":["import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  const defaultPosterImg =\n    'https://www.reelviews.net/resources/img/default_poster.jpg';\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            <img\n              src={\n                movie.poster_path\n                  ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                  : defaultPosterImg\n              }\n              alt={movie.title}\n            />\n            <p>{movie.title}</p>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n","import styled from 'styled-components';\n\nexport const ContainerLoader = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 110vh;\n`;\n","import PropTypes from 'prop-types';\nimport { ContainerLoader } from './Loader.styled';\n\nexport const Loader = ({ children }) => {\n  return <ContainerLoader>{children}</ContainerLoader>;\n};\n\nLoader.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { fetchTrends } from 'services/MovieAPI';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { css } from '@emotion/react';\nimport { Loader } from 'components/Loader/Loader';\nimport { PropagateLoader } from 'react-spinners';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchTrends();\n        setMovies([...data.results]);\n      } catch (error) {\n        console.log('Error', error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      {isLoading && (\n        <Loader>\n          <PropagateLoader\n            color={'#36D7B7'}\n            css={override}\n            loading={isLoading}\n          />\n        </Loader>\n      )}\n      <h1>Most popular movies</h1>\n      <MoviesList movies={movies} />\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["MoviesList","_ref","movies","location","useLocation","_jsx","children","map","movie","_jsxs","Link","to","concat","id","state","from","src","poster_path","alt","title","ContainerLoader","styled","_templateObject","_taggedTemplateLiteral","Loader","override","css","_useState","useState","_useState2","_slicedToArray","setMovies","_useState3","_useState4","isLoading","setIsLoading","useEffect","fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","fetchTrends","sent","_toConsumableArray","results","t0","console","log","message","finish","stop","apply","arguments","_Fragment","PropagateLoader","color","loading"],"sourceRoot":""}